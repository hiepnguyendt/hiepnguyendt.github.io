[
{
	"uri": "/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "JavaScripts là gì ? JavaScript là một ngôn ngữ lập trình phổ biến được sử dụng phía máy khách (client-side) và phía máy chủ (server-side) để phát triển ứng dụng web động. Được tạo ra ban đầu để thực hiện các tác vụ xử lý trên trình duyệt web, JavaScript ngày nay đã trở thành một ngôn ngữ chủ đạo trong việc phát triển ứng dụng web.\nMột số khái niệm cơ bản trong JavaScript:\nBiến và kiểu dữ liệu: JavaScript cho phép khai báo biến bằng từ khóa var, let, hoặc const. Có các kiểu dữ liệu cơ bản như số (number), chuỗi (string), boolean (true/false), mảng (array), đối tượng (object) và null.\nCú pháp cơ bản: JavaScript sử dụng cú pháp tương tự như các ngôn ngữ lập trình khác. Bạn có thể sử dụng các toán tử (+, -, *, /) để thực hiện các phép toán số học, hay các toán tử (+) để nối chuỗi.\nCấu trúc điều khiển: JavaScript hỗ trợ các cấu trúc điều khiển như if/else, switch, vòng lặp for, while, do/while để điều khiển luồng của chương trình.\nHàm: Bạn có thể định nghĩa và sử dụng các hàm trong JavaScript. Hàm là một khối mã thực hiện một tác vụ cụ thể và có thể được gọi lại từ nhiều nơi trong chương trình.\nSự xử lý sự kiện: JavaScript cho phép bạn xử lý sự kiện như nhấp chuột, nhấn phím, hoặc gửi yêu cầu từ trang web. Bạn có thể gắn các hàm xử lý sự kiện vào các phần tử HTML để tương tác với người dùng.\nXử lý DOM: JavaScript có thể thay đổi cấu trúc và nội dung của trang web bằng cách truy cập và thay đổi các phần tử HTML thông qua DOM (Document Object Model).\nAJAX và Fetch: JavaScript hỗ trợ giao tiếp với máy chủ bằng cách sử dụng công nghệ AJAX (Asynchronous JavaScript and XML) hoặc Fetch API để gửi và nhận dữ liệu từ máy chủ mà không cần tải lại toàn bộ trang web.\nJSON: JavaScript Object Notation (JSON) là một định dạng dữ liệu phổ biến được sử dụng để truyền dữ liệu giữa máy chủ và trình duyệt. JavaScript hỗ trợ parse JSON thành các đối tượng và ngược lại.\nĐây chỉ là một số khái niệm cơ bản về JavaScript. Ngôn ngữ này có nhiều tính năng mạnh mẽ khác và được sử dụng rộng rãi trong việc xây dựng các ứng dụng web phức tạp.\n"
},
{
	"uri": "/vi/10-loop/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Làm việc với Amazon System Manager - Session Manager Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon System Manager - Session Management. Thực hành tạo kết nối đến máy chủ public và máy chủ private trong VPC.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/11-array2/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Làm việc với Amazon System Manager - Session Manager Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon System Manager - Session Management. Thực hành tạo kết nối đến máy chủ public và máy chủ private trong VPC.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/8-object/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Làm việc với Amazon System Manager - Session Manager Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon System Manager - Session Management. Thực hành tạo kết nối đến máy chủ public và máy chủ private trong VPC.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Làm việc với Amazon System Manager - Session Manager Tổng quan Trong bài lab này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành về Amazon System Manager - Session Management. Thực hành tạo kết nối đến máy chủ public và máy chủ private trong VPC.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Port Forwarding Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/2-var-comments-builtin/",
	"title": "Var, Comment, Builtin",
	"tags": [],
	"description": "",
	"content": " Khai báo biến ( Var )\nTrong JavaScript, từ khóa \u0026ldquo;var\u0026rdquo; được sử dụng để khai báo một biến. Khi sử dụng \u0026ldquo;var\u0026rdquo;, bạn có thể tạo ra một biến và gán giá trị cho nó.\nVí dụ: Để khai báo một biến có tên \u0026ldquo;fullName\u0026rdquo; và gán giá trị là \u0026ldquo;First Cloud Journey\u0026rdquo;, bạn có thể sử dụng từ khóa \u0026ldquo;var\u0026rdquo; như sau:\nvar fullName = \u0026#39;First Cloud Journey\u0026#39;; // khai báo tên Sau khi khai báo, biến \u0026ldquo;First Cloud Journey\u0026rdquo; có thể được sử dụng trong phạm vi của khối mã mà nó được khai báo trong, hoặc trong toàn bộ phạm vi chương trình nếu nó được khai báo ở mức độ global.\nMột biến được khai báo bằng \u0026ldquo;var\u0026rdquo; có phạm vi chức năng (function scope). Điều này có nghĩa là biến chỉ có thể được truy cập trong cùng một hàm hoặc khối mã nơi nó được khai báo. Nếu bạn cố gắng truy cập biến bên ngoài phạm vi đó, bạn sẽ gặp lỗi.\nVí dụ:\nfunction myFunction() {\rvar fullName = \u0026#39;First Cloud Journey\u0026#39;; // Biến fullName chỉ có thể truy cập trong myFunction()\rconsole.log(fullName); // In ra First Cloud Journey\r}\rconsole.log(fullName); // Lỗi - biến fullName không tồn tại ở đây Comments\nTrong JavaScript, chú thích (comments) được sử dụng để thêm các ghi chú, giải thích mã nguồn hoặc tạm thời vô hiệu hóa một đoạn mã. Chú thích không được thực thi và không ảnh hưởng đến luồng điều khiển của chương trình.\nCó hai loại chú thích phổ biến trong JavaScript:\nChú thích dùng hai dấu gạch chéo (//): Dùng để chú thích một dòng. Mọi nội dung sau dấu // trong cùng một dòng được coi là chú thích và không được thực thi. Ví dụ: // Đây là một comment dùng để giải thích code\rvar x = 10; // Gán giá trị 10 cho biến x Chú thích dùng dấu gạch chéo và dấu sao (/ \u0026hellip; /) hoặc (/ */)**: Dùng để chú thích nhiều dòng hoặc một phần của mã. Mọi nội dung nằm trong cặp dấu trên được coi là chú thích và không được thực thi. Ví dụ: /*\rĐây là một chú thích\rdùng để giải thích mã nguồn\r*/\rvar y = 20; /* Gán giá trị 20 cho biến y */ Built-in\nTrong JavaScript, thuật ngữ \u0026ldquo;builtin\u0026rdquo; (hay \u0026ldquo;built-in\u0026rdquo;) được sử dụng để chỉ các đối tượng, phương thức, hàm hoặc biến mà đã được cung cấp sẵn bởi ngôn ngữ JavaScript và có thể sử dụng mà không cần phải khai báo hoặc tải thêm thư viện ngoài.\nVí dụ về các \u0026ldquo;builtin\u0026rdquo; trong JavaScript bao gồm:\nCác đối tượng toàn cục như Math, Date, RegExp, Array, Object, String,\u0026hellip;\nvar currentDate = new Date(); // Sử dụng đối tượng Date\rvar text = \u0026#34;Hello, World!\u0026#34;; // Sử dụng đối tượng String\rvar numbers = [1, 2, 3, 4, 5]; // Sử dụng đối tượng Array Các hàm toàn cục như parseInt(), parseFloat(), isNaN(), setTimeout(), setInterval(),\u0026hellip;\nvar number = parseInt(\u0026#34;10\u0026#34;); // Sử dụng hàm parseInt()\rsetTimeout(function() {\rconsole.log(\u0026#34;Thời gian đã hết!\u0026#34;);\r}, 5000); // Sử dụng hàm setTimeout() để chạy hàm trên trong thời gian là 5s Các biến toàn cục như undefined, NaN, Infinity,\u0026hellip;\nconsole.log(undefined); // In ra giá trị undefined\rconsole.log(NaN); // In ra giá trị NaN\rconsole.log(Infinity); // In ra giá trị Infinity Các \u0026ldquo;builtin\u0026rdquo; trong JavaScript là những thành phần cốt lõi của ngôn ngữ và cung cấp các chức năng phổ biến để thực hiện các tác vụ như xử lý chuỗi, thao tác mảng, làm việc với thời gian, tính toán số học, và nhiều hơn nữa.\n"
},
{
	"uri": "/vi/3-operation-datatype/",
	"title": "Toán tử, Kiểu dữ liệu",
	"tags": [],
	"description": "",
	"content": "Toán tử Sử dụng để thực hiện các phép tính và thao tác trên các giá trị. Dưới đây là một số toán tử phổ biến trong JavaScript:\nToán tử số học:\n\u0026quot;+\u0026quot; : Cộng hai giá trị.\n\u0026quot;-\u0026quot; : Trừ giá trị bên phải từ giá trị bên trái.\n\u0026quot;*\u0026quot; : Nhân hai giá trị.\n\u0026quot;/\u0026quot; : Chia giá trị bên trái cho giá trị bên phải.\n\u0026quot;%\u0026quot; : Lấy phần dư của phép chia giữa hai giá trị.\nToán tử gán:\n\u0026quot;=\u0026quot; : Gán giá trị bên phải cho biến bên trái. \u0026quot;+=\u0026quot; : Cộng giá trị bên phải với giá trị củ- a biến bên trái và gán kết quả cho biến đó. Toán tử so sánh:\n\u0026quot;==\u0026quot; : Kiểm tra xem hai giá trị có bằng nhau hay không (không kiểm tra kiểu dữ liệu). \u0026quot;===\u0026quot; : Kiểm tra xem hai giá trị có bằng nhau và cùng kiểu dữ liệu hay không. \u0026quot;!=\u0026quot; : Kiểm tra xem hai giá trị có khác nhau hay không (không kiểm tra kiểu dữ liệu). \u0026quot;!==\u0026quot; : Kiểm tra xem hai giá trị có khác nhau hoặc khác kiểu dữ liệu hay không. \u0026quot;\u0026gt;\u0026quot; : Kiểm tra xem giá trị bên trái có lớn hơn giá trị bên phải hay không. \u0026quot;\u0026lt;\u0026quot; : Kiểm tra xem giá trị bên trái có nhỏ hơn giá trị bên phải hay không. \u0026quot;\u0026gt;=\u0026quot; : Kiểm tra xem giá trị bên trái có lớn hơn hoặc bằng giá trị bên phải hay không. \u0026quot;\u0026lt;=\u0026quot; : Kiểm tra xem giá trị bên trái có nhỏ hơn hoặc bằng giá trị bên phải hay không. Toán tử logic:\n\u0026quot;\u0026amp;\u0026amp;\u0026quot; : Phép AND logic, trả về true nếu cả hai giá trị đều đúng. \u0026quot;||\u0026quot; : Phép OR logic, trả về true nếu ít nhất một trong hai giá trị là đúng. \u0026quot;!\u0026quot; : Phép NOT logic, đảo ngược giá trị logic. Toán tử chuỗi:\n\u0026quot;+\u0026quot; : Nối chuỗi, kết hợp hai chuỗi lại với nhau. Và còn nhiều toán tử khác như toán tử ba ngôi (ternary), toán tử tăng/giảm (++/\u0026ndash;), toán tử bit, và toán tử khác. Mỗi toán tử có cú pháp và quy tắc hoạt động riêng, nên cần hiểu kỹ để sử dụng đúng và hiệu quả.\nKiểu dữ liệu Sử dụng để lưu trữ và làm việc với các giá trị. Dưới đây là một số kiểu dữ liệu phổ biến trong JavaScript:\nKiểu dữ liệu Nguyên thủy (Primitive Data Types): Number: Kiểu dữ liệu số, bao gồm cả số nguyên và số thực. String: Kiểu dữ liệu chuỗi, được sử dụng để lưu trữ và làm việc với các dãy ký tự. Boolean: Kiểu dữ liệu logic, chỉ có hai giá trị là true (đúng) và false (sai). null: Biểu thị giá trị không tồn tại hoặc không hợp lệ. undefined: Biểu thị một biến chưa được gán giá trị. Symbol: Kiểu dữ liệu duy nhất và không thay đổi, được sử dụng để tạo ra các giá trị duy nhất. Kiểu dữ liệu Đối tượng (Object Data Type): Object: Kiểu dữ liệu đối tượng, được sử dụng để lưu trữ và làm việc với các thuộc tính và phương thức. Kiểu dữ liệu Đặc biệt: Array: Một loại đặc biệt của đối tượng, được sử dụng để lưu trữ và làm việc với một tập hợp các giá trị có thứ tự. Function: Một loại đặc biệt của đối tượng, được sử dụng để định nghĩa và thực thi các khối mã. Nhưng đáng lưu ý rằng JavaScript là một ngôn ngữ có kiểu dữ liệu động (dynamically typed), điều này có nghĩa là bạn không cần phải khai báo kiểu dữ liệu cho biến khi tạo ra chúng. Kiểu dữ liệu được xác định tự động dựa trên giá trị mà biến đang giữ. Điều này cho phép bạn gán các kiểu dữ liệu khác nhau cho cùng một biến trong quá trình thực thi.\n"
},
{
	"uri": "/vi/4-function/",
	"title": "Quản lý session logs",
	"tags": [],
	"description": "",
	"content": "Với Session Manager chúng ta có thể xem được lịch sử các kết nối tới cá\u0026mdash; title : \u0026ldquo;Hàm\u0026rdquo; date : \u0026ldquo;r Sys.Date()\u0026rdquo; weight : 4 chapter : false pre : \u0026quot; 4. \u0026quot; Hàm là một khối mã được đặt tên và có thể được gọi để thực hiện một tác vụ cụ thể. Hàm giúp tổ chức mã thành các đơn vị nhỏ hơn, tái sử dụng mã và tạo ra các chức năng độc lập. Dưới đây là cách khai báo và sử dụng hàm trong JavaScript:\nKhai báo hàm:\nHàm có thể được khai báo bằng cách sử dụng từ khóa function, theo sau là tên của hàm và danh sách các tham số trong dấu ngoặc đơn (). Thân hàm, chứa các câu lệnh để thực thi, được đặt trong cặp ngoặc nhọn {}.\nfunction myFunction(param1, param2) {\r// Thân hàm\r// Các câu lệnh được thực thi ở đây\r} Gọi hàm:\nHàm có thể được gọi bằng cách sử dụng tên hàm, theo sau là danh sách các đối số trong dấu ngoặc đơn (). myFunction(arg1, arg2); // Gọi hàm myFunction với các đối số arg1 và arg2 Giá trị trả về:\nHàm có thể trả về một giá trị bằng cách sử dụng từ khóa return. Khi gặp phần tử return, hàm sẽ kết thúc và trả về giá trị đã được xác định. function addNumbers(a, b) {\rreturn a + b;\r}\rvar result = addNumbers(5, 3); // Gọi hàm và lưu giá trị trả về vào biến result\rconsole.log(result); // In ra 8 Hàm nặc danh (Anonymous function):\nHàm có thể được khai báo mà không cần tên, gọi là hàm nặc danh. Hàm nặc danh thường được sử dụng như một đối số của các hàm khác hoặc để tạo ra các khối mã độc lập.\nvar myFunction = function() {\r// Thân hàm nặc danh\r// Các câu lệnh được thực thi ở đây\r}; Hàm mũi tên (Arrow function):\nArrow function là một cú pháp ngắn gọn để khai báo hàm trong JavaScript. Nó có thể giúp viết mã ngắn gọn hơn và giữ nguyên ngữ cảnh this của hàm gốc.\nvar addNumbers = (a, b) =\u0026gt; a + b;\rvar result = addNumbers(5, 3);\rconsole.log(result); // In ra 8 Hàm trong JavaScript rất mạnh mẽ và linh hoạt, cho phép bạn thực hiện các tác vụ phức tạp và tái sử dụng mã một cách dễ dàng.c instance thông qua Session history. Tuy nhiên chúng ta chưa xem được chi tiết các câu lệnh được sử dụng.\nTrong phần này chúng ta sẽ tiến hành tạo S3 bucket và thực hiện cấu hình lưu trữ các session logs để xem được chi tiết các câu lệnh được sử dụng trong session.\nNội dung: Cập nhật IAM Role Tạo S3 Bucket Tạo S3 Gateway endpoint Cấu hình Session logs "
},
{
	"uri": "/vi/5-string/",
	"title": "Chuỗi",
	"tags": [],
	"description": "",
	"content": "Trong JavaScript, một \u0026ldquo;string\u0026rdquo; là một chuỗi các ký tự được đặt trong dấu nháy đơn (\u0026rsquo;\u0026rsquo;) hoặc dấu nháy kép (\u0026quot;\u0026quot;). Dưới đây là một số ví dụ về cách khai báo và sử dụng string trong JavaScript:\nKiểu dữ liệu\nChuỗi là một kiểu dữ liệu nguyên thủy trong JavaScript. Nó được biểu diễn bằng đối tượng String. Tạo chuỗi\nCó nhiều cách để tạo chuỗi trong JavaScript: Sử dụng dấu nháy đơn hoặc dấu nháy kép:\nvar str1 = \u0026#34;First Cloud Journey\u0026#34;;\rvar str2 = \u0026#39;First Cloud Journey\u0026#39;; Sử dụng hàm String:\nvar str3 = new String(\u0026#34;First Cloud Journey\u0026#34;); Sử dụng toán tử nối (+):\nvar str4 = \u0026#34;First\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Cloud\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Journey\u0026#34;; Thao tác với chuỗi\nJavaScript cung cấp nhiều phương thức để thao tác với chuỗi, bao gồm: Lấy độ dài chuỗi: var str = \u0026#34;First Cloud Journey\u0026#34;;\rvar length = str.length; // length = 18 Tìm kiếm ký tự: var str = \u0026#34;First Cloud Journey\u0026#34;;\rvar index = str.indexOf(\u0026#34;i\u0026#34;); // index = 1 Cắt chuỗi: var str = \u0026#34;First Cloud Journey\u0026#34;;\rvar substring = str.substring(0, 5); // substring = \u0026#34;First\u0026#34; Chuyển đổi chuỗi: var str = \u0026#34;First Cloud Journey\u0026#34;;\rvar uppercase = str.toUpperCase(); // uppercase = \u0026#34;FIRST CLOUD JOURNEY\u0026#34; Thay thế chuỗi Thay thế một chuỗi con cụ thể var str = \u0026#34;Hello, world!Welcome to the First Cloud Journey.\u0026#34;;\rvar replaceStr = str.replace(\u0026#34;world\u0026#34;,\u0026#34;everyone\u0026#34;); console.log(replacedString1); // Output: Hello, everyone*! Welcome to First Cloud Journey. Thay thế tất cả các kết quả khớp với một chuỗi con var str = \u0026#34;Hello, world!Welcome to the First Cloud Journey.\u0026#34;;\rvar replaceStr1 = str.replace(/world/g,\u0026#34;everyone\u0026#34;); console.log(replacedString1); // Output: Hello, everyone! Welcome to the First Cloud Journey. Thay thế bằng sử dụng biểu thức chính quy var str = \u0026#34;Hello, world!Welcome to the First Cloud Journey.\u0026#34;;\rvar replaceStr2 = str.replace(/o/gi,\u0026#34;*\u0026#34;); console.log(replacedString2); // Output: Hell*, every*e! Welc*me t* the First Cl*ud J*urney. "
},
{
	"uri": "/vi/6-number/",
	"title": "Number",
	"tags": [],
	"description": "",
	"content": " Khái niệm Kiểu dữ liệu số trong JavaScript được sử dụng để biểu diễn các giá trị số. Bao gồm hai loại chính: Số nguyên: Ví dụ: 1, 2, 3, 4, 5 Số thực: Ví dụ: 1.2, 3.14, 100.5 Biểu diễn Số trong JavaScript được biểu diễn dưới dạng số thực dấu phẩy động theo chuẩn IEEE-754 với độ chính xác kép. Thao tác JavaScript cung cấp nhiều toán tử và hàm để thao tác với số, bao gồm:\nToán tử số học: +, -, *, /, %, ++, \u0026ndash; Hàm toán học: Math.sqrt(), Math.floor(), Math.ceil(), Math.round() var x = 10;\rvar y = 20;\r// Cộng hai số\rvar a = a + b; // a = 30\r// Trừ hai số\rvar b = b - a; // b = 10\r// Nhân hai số\rvar c = a * b; // c = 200\r// Chia hai số\rvar d = b / a; // d = 2\r// Lấy căn bậc hai\rvar e = Math.sqrt(a); // e = 3.162277660168379\r// Làm tròn xuống\rvar f = Math.floor(a.5); // f = 1\r// Làm tròn lên\rvar g = Math.ceil(a.5); // g = 2\r// Làm tròn\rvar h = Math.round(a.5); // h = 2\rconsole.log(a, b, c, d, e, f, g, h); "
},
{
	"uri": "/vi/7-array/",
	"title": "Array",
	"tags": [],
	"description": "",
	"content": "Mảng (Array) trong JavaScript Khái niệm:\nMảng trong JavaScript là một kiểu dữ liệu được sử dụng để lưu trữ tập hợp các giá trị có thứ tự. Nó có thể chứa bất kỳ kiểu dữ liệu nào, bao gồm số, chuỗi, đối tượng, v.v. Khai báo và khởi tạo:\nCó hai cách phổ biến để khai báo và khởi tạo mảng trong JavaScript: Sử dụng dấu ngoặc vuông: var arr = []; // Khai báo mảng rỗng\rvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;]; // Khai báo mảng với các giá trị ban đầu Sử dụng hàm Array var arr = new Array(); // Khai báo mảng rỗng\rvar arr = new Array(1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;); // Khai báo mảng với các giá trị ban đầu Truy cập phần tử:\nBạn có thể truy cập phần tử trong mảng bằng cách sử dụng chỉ mục. Chỉ mục bắt đầu từ 0, và tương ứng với vị trí của phần tử trong mảng.\nvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;];\r// Truy cập phần tử đầu tiên\rvar firstElement = arr[0]; // firstElement = 1\r// Truy cập phần tử cuối cùng\rvar lastElement = arr[arr.length - 1]; // lastElement = \u0026#34;b\u0026#34; Thay đổi phần tử:\nBạn có thể thay đổi giá trị của phần tử trong mảng bằng cách gán giá trị mới cho nó.\nvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;];\r// Thay đổi giá trị của phần tử đầu tiên\rarr[0] = 10;\r// Thay đổi giá trị của phần tử cuối cùng\rarr[arr.length - 1] = \u0026#34;c\u0026#34;; Thêm phần tử:\nCó nhiều phương thức để thêm phần tử vào mảng: Sử dụng phương thức push:\nvar arr = [1, 2, 3];\r// Thêm phần tử vào cuối mảng\rarr.push(4); // arr = [1, 2, 3, 4] Sử dụng phương thức unshift:\nvar arr = [1, 2, 3];\r// Thêm phần tử vào đầu mảng\rarr.unshift(0); // arr = [0, 1, 2, 3] Xóa phần tử:\nCó nhiều phương thức để xóa phần tử khỏi mảng: Sử dụng phương thức pop: var arr = [1, 2, 3];\r// Xóa phần tử cuối cùng khỏi mảng\rarr.pop(); // arr = [1, 2] Sử dụng phương thức shift: var arr = [1, 2, 3];\r// Xóa phần tử đầu tiên khỏi mảng\rarr.shift(); // arr = [2, 3] Tìm kiếm phần tử:\nBạn có thể sử dụng các phương thức sau để tìm kiếm phần tử trong mảng: Phương thức indexOf:\nvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;];\r// Tìm vị trí xuất hiện đầu tiên của \u0026#34;a\u0026#34;\rvar index = arr.indexOf(\u0026#34;a\u0026#34;); // index = 3 Phương thức lastIndexOf:\nvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;a\u0026#34;]; // Tìm vị trí xuất hiện cuối cùng của \u0026#34;a\u0026#34;\rvar index = arr.lastIndexOf(\u0026#34;a\u0026#34;); // index = 5 Sắp xếp phần tử:\nSử dụng phương thức sort để sắp xếp phần tử trong mảng: var arr = [3, 2, 1, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;];\r// Sắp xếp phần tử theo thứ tự tăng dần\rarr.sort(); // arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;] "
},
{
	"uri": "/vi/9-cstatement-ternaryoperator/",
	"title": "Câu lệnh điều kiện - Toán tử ba ngôi",
	"tags": [],
	"description": "",
	"content": "Lệnh rẽ nhánh If else Khái niệm Câu lệnh diều kiện if..else là 1 trong những cấu trúc điều kiện cơ bản. Nó cho phép bạn thực thi 1 khối mã nhật dịnh chỉ khi một điều kiện nào đó được thỏa mãn. Cú pháp: if(điều kiện){\r// code sẽ được thực thi nếu thỏa điều kiện\r} else {\r// code sẽ được thực thi nếu thỏa điều kiện\r} Ví dụ: var a = 1;\rvar b = 2;\rif ( a \u0026lt; b){\rconsole.log(\u0026#34;So sánh đúng!\u0026#34;);\r} else {\rconsole.log(\u0026#34;So sánh sai!\u0026#34;);\r} Câu lệnh rẽ nhánh - Switch Khái niệm Câu lệnh điều kiện switch\u0026hellip;case là một lựa chọn khác để thực hiện logic rẽ nhánh trong JavaScript. Nó hữu ích khi bạn muốn kiểm tra một biến với nhiều giá trị khác nhau và thực thi các khối lệnh tương ứng. Cú pháp: switch (expression) {\rcase value1:\r// Khối lệnh được thực thi nếu expression có giá trị bằng value1\rbreak;\rcase value2:\r// Khối lệnh được thực thi nếu expression có giá trị bằng value2\rbreak;\r// ... Thêm các case khác nếu cần\rdefault:\r// Khối lệnh mặc định được thực thi nếu expression không khớp với bất kỳ case nào (tùy chọn)\r} Ví dụ: var day = 3;\rswitch (day) {\rcase 1:\rconsole.log(\u0026#34;Thứ Hai\u0026#34;);\rbreak;\rcase 2:\rconsole.log(\u0026#34;Thứ Ba\u0026#34;);\rbreak;\rcase 3:\rconsole.log(\u0026#34;Thứ Tư\u0026#34;);\rbreak;\rdefault:\rconsole.log(\u0026#34;Không phải ngày trong tuần (1-3)\u0026#34;);\r} Toán tử 3 ngôi (Ternary operator) Khái niệm: Toán tử 3 ngôi, hay còn gọi là toán tử điều kiện, là một toán tử trong JavaScript cho phép bạn rút gọn cú pháp của một phép gán hoặc một câu lệnh điều kiện if/else.\nCú pháp:\nđiều kiện ? giâ trị 1 : giá trị 2 Ví dụ:\nvar num = 10;\rvar result = num \u0026gt; 0 ? \u0026#34;Số dương\u0026#34; : \u0026#34;Số không dương\u0026#34;;\rconsole.log(result); // \u0026#34;Số dương\u0026#34; Thực hành:\nTạo hàm getCanVoteMessage, hàm này có 1 tham số là age. Trong trường hợp từ 18 tuổi trở lên hàm sẽ trả về Bạn có thể bỏ phiếu, ngược lại hàm trả về Bạn chưa được bỏ phiếu. Kết quả\r// Làm bài\rfunction getCanVoteMessage(age){\rvar canVote = age \u0026gt;= 18 ? \u0026quot;Bạn có thể bỏ phiếu\u0026quot; : \u0026quot;Bạn chưa được bỏ phiếu\u0026quot;;\rreturn canVote;\r}\r// Kỳ vọng\rconsole.log(getCanVoteMessage(18)) // 'Bạn có thể bỏ phiếu'\rconsole.log(getCanVoteMessage(15)) // 'Bạn chưa được bỏ phiếu'\r"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
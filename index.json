[
{
	"uri": "/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "JavaScripts là gì ? JavaScript là một ngôn ngữ lập trình phổ biến được sử dụng phía máy khách (client-side) và phía máy chủ (server-side) để phát triển ứng dụng web động. Được tạo ra ban đầu để thực hiện các tác vụ xử lý trên trình duyệt web, JavaScript ngày nay đã trở thành một ngôn ngữ chủ đạo trong việc phát triển ứng dụng web.\nMột số khái niệm cơ bản trong JavaScript:\nBiến và kiểu dữ liệu: JavaScript cho phép khai báo biến bằng từ khóa var, let, hoặc const. Có các kiểu dữ liệu cơ bản như số (number), chuỗi (string), boolean (true/false), mảng (array), đối tượng (object) và null.\nCú pháp cơ bản: JavaScript sử dụng cú pháp tương tự như các ngôn ngữ lập trình khác. Bạn có thể sử dụng các toán tử (+, -, *, /) để thực hiện các phép toán số học, hay các toán tử (+) để nối chuỗi.\nCấu trúc điều khiển: JavaScript hỗ trợ các cấu trúc điều khiển như if/else, switch, vòng lặp for, while, do/while để điều khiển luồng của chương trình.\nHàm: Bạn có thể định nghĩa và sử dụng các hàm trong JavaScript. Hàm là một khối mã thực hiện một tác vụ cụ thể và có thể được gọi lại từ nhiều nơi trong chương trình.\nSự xử lý sự kiện: JavaScript cho phép bạn xử lý sự kiện như nhấp chuột, nhấn phím, hoặc gửi yêu cầu từ trang web. Bạn có thể gắn các hàm xử lý sự kiện vào các phần tử HTML để tương tác với người dùng.\nXử lý DOM: JavaScript có thể thay đổi cấu trúc và nội dung của trang web bằng cách truy cập và thay đổi các phần tử HTML thông qua DOM (Document Object Model).\nAJAX và Fetch: JavaScript hỗ trợ giao tiếp với máy chủ bằng cách sử dụng công nghệ AJAX (Asynchronous JavaScript and XML) hoặc Fetch API để gửi và nhận dữ liệu từ máy chủ mà không cần tải lại toàn bộ trang web.\nJSON: JavaScript Object Notation (JSON) là một định dạng dữ liệu phổ biến được sử dụng để truyền dữ liệu giữa máy chủ và trình duyệt. JavaScript hỗ trợ parse JSON thành các đối tượng và ngược lại.\nĐây chỉ là một số khái niệm cơ bản về JavaScript. Ngôn ngữ này có nhiều tính năng mạnh mẽ khác và được sử dụng rộng rãi trong việc xây dựng các ứng dụng web phức tạp.\n"
},
{
	"uri": "/",
	"title": "Tìm hiểu về Javascript cơ bản",
	"tags": [],
	"description": "",
	"content": "Tìm hiểu về Javascript cơ bản ? Trong workshop này, chúng ta sẽ cùng nhau tìm hiểu một số kiến thức cơ bản của JavaScript.\nGiới thiệu Var, Comments, Builtin Operation, Data Type Function String Number Array Object Câu lệnh điều kiện, Toán tử ba ngôi Vòng lặp "
},
{
	"uri": "/2-var-comments-builtin/",
	"title": "Var, Comment, Builtin",
	"tags": [],
	"description": "",
	"content": " Khai báo biến ( Var )\nTrong JavaScript, từ khóa \u0026ldquo;var\u0026rdquo; được sử dụng để khai báo một biến. Khi sử dụng \u0026ldquo;var\u0026rdquo;, bạn có thể tạo ra một biến và gán giá trị cho nó.\nVí dụ: Để khai báo một biến có tên \u0026ldquo;fullName\u0026rdquo; và gán giá trị là \u0026ldquo;First Cloud Journey\u0026rdquo;, bạn có thể sử dụng từ khóa \u0026ldquo;var\u0026rdquo; như sau:\nvar fullName = \u0026#39;First Cloud Journey\u0026#39;; // khai báo tên Sau khi khai báo, biến \u0026ldquo;First Cloud Journey\u0026rdquo; có thể được sử dụng trong phạm vi của khối mã mà nó được khai báo trong, hoặc trong toàn bộ phạm vi chương trình nếu nó được khai báo ở mức độ global.\nMột biến được khai báo bằng \u0026ldquo;var\u0026rdquo; có phạm vi chức năng (function scope). Điều này có nghĩa là biến chỉ có thể được truy cập trong cùng một hàm hoặc khối mã nơi nó được khai báo. Nếu bạn cố gắng truy cập biến bên ngoài phạm vi đó, bạn sẽ gặp lỗi.\nVí dụ:\nfunction myFunction() {\rvar fullName = \u0026#39;First Cloud Journey\u0026#39;; // Biến fullName chỉ có thể truy cập trong myFunction()\rconsole.log(fullName); // In ra First Cloud Journey\r}\rconsole.log(fullName); // Lỗi - biến fullName không tồn tại ở đây Comments\nTrong JavaScript, chú thích (comments) được sử dụng để thêm các ghi chú, giải thích mã nguồn hoặc tạm thời vô hiệu hóa một đoạn mã. Chú thích không được thực thi và không ảnh hưởng đến luồng điều khiển của chương trình.\nCó hai loại chú thích phổ biến trong JavaScript:\nChú thích một dòng: dùng hai dấu gạch chéo (//): Dùng để chú thích một dòng. Mọi nội dung sau dấu // trong cùng một dòng được coi là chú thích và không được thực thi. Ví dụ: // Đây là một comment dùng để giải thích code\rvar x = 10; // Gán giá trị 10 cho biến x Chú thích nhiều dòng: dùng dấu gạch chéo và dấu sao (/ \u0026hellip; /) hoặc (/ */)**: Dùng để chú thích nhiều dòng hoặc một phần của mã. Mọi nội dung nằm trong cặp dấu trên được coi là chú thích và không được thực thi. Ví dụ: /*\rĐây là một chú thích\rdùng để giải thích mã nguồn\r*/\rvar y = 20; /* Gán giá trị 20 cho biến y */ Sử dụng phím tắt:\nWindows: Ctrl + / MacOS: Command + / Built-in\nTrong JavaScript, thuật ngữ \u0026ldquo;builtin\u0026rdquo; (hay \u0026ldquo;built-in\u0026rdquo;) được sử dụng để chỉ các đối tượng, phương thức, hàm hoặc biến mà đã được cung cấp sẵn bởi ngôn ngữ JavaScript và có thể sử dụng mà không cần phải khai báo hoặc tải thêm thư viện ngoài.\nVí dụ về các \u0026ldquo;builtin\u0026rdquo; trong JavaScript bao gồm:\nCác đối tượng toàn cục như Math, Date, RegExp, Array, Object, String,\u0026hellip;\nvar currentDate = new Date(); // Sử dụng đối tượng Date\rvar text = \u0026#34;Hello, World!\u0026#34;; // Sử dụng đối tượng String\rvar numbers = [1, 2, 3, 4, 5]; // Sử dụng đối tượng Array Các hàm toàn cục như alert, console, confirm, promt, parseInt(), parseFloat(), isNaN(), setTimeout(), setInterval(),\u0026hellip;\nvar number = parseInt(\u0026#34;10\u0026#34;); // Sử dụng hàm parseInt()\rsetTimeout(function() {\rconsole.log(\u0026#34;Thời gian đã hết!\u0026#34;);\ralert(\u0026#34;Thời gian đã hết!\u0026#34;);\r}, 5000); // Sử dụng hàm setTimeout() để chạy hàm trên trong thời gian là 5s Các biến toàn cục như undefined, NaN, Infinity,\u0026hellip;\nconsole.log(undefined); // In ra giá trị undefined\rconsole.log(NaN); // In ra giá trị NaN\rconsole.log(Infinity); // In ra giá trị Infinity Các \u0026ldquo;builtin\u0026rdquo; trong JavaScript là những thành phần cốt lõi của ngôn ngữ và cung cấp các chức năng phổ biến để thực hiện các tác vụ như xử lý chuỗi, thao tác mảng, làm việc với thời gian, tính toán số học, và nhiều hơn nữa.\n"
},
{
	"uri": "/3-operation-datatype/",
	"title": "Toán tử, Kiểu dữ liệu",
	"tags": [],
	"description": "",
	"content": "Toán tử Sử dụng để thực hiện các phép tính và thao tác trên các giá trị. Dưới đây là một số toán tử phổ biến trong JavaScript:\nToán tử số học (Arithmetic):\n\u0026quot;+\u0026quot; : Cộng hai giá trị.\n\u0026quot;-\u0026quot; : Trừ giá trị bên phải từ giá trị bên trái.\n\u0026quot;*\u0026quot; : Nhân hai giá trị.\n\u0026quot;/\u0026quot; : Chia giá trị bên trái cho giá trị bên phải.\n\u0026quot;%\u0026quot; : Lấy phần dư của phép chia giữa hai giá trị.\n\u0026quot;++\u0026quot;: Tăng 1 giá trị số\n\u0026quot;\u0026ndash;\u0026quot; : Giảm 1 giá trị số\n\u0026quot;\u0026quot;** : Lũy thừa\nVí dụ:\nx++ tăng giá trị biến lên 1 và trả về giá trị trước khi tăng ++x tăng giá trị biến lên 1 và trả về giá trị sau khi tăng x\u0026ndash; giảm giá trị biến xuống 1 và trả về giá trị trước khi giảm \u0026ndash;x giảm giá trị biến xuống 1 và trả về giá trị sau khi giảmm Toán tử gán (Assigment):\n\u0026quot;=\u0026quot; : a = b =\u0026gt; a = b \u0026quot;+=\u0026quot; : a + = b =\u0026gt; a = a + b \u0026quot;-=\u0026quot; : a - = b =\u0026gt; a = a - b \u0026quot;*=\u0026quot; : a * = b =\u0026gt; a = a * b \u0026quot;/=\u0026quot; : a / = b =\u0026gt; a = a / b \u0026quot;%=\u0026quot; : a \u0026amp; = b =\u0026gt; a = a % b \u0026quot;+=\u0026quot; : a ** = b =\u0026gt; a = a ** b Toán tử so sánh (Comparison):\n\u0026quot;==\u0026quot; : Kiểm tra xem hai giá trị có bằng nhau hay không (không kiểm tra kiểu dữ liệu). \u0026quot;===\u0026quot; : Kiểm tra xem hai giá trị có bằng nhau và cùng kiểu dữ liệu hay không. \u0026quot;!=\u0026quot; : Kiểm tra xem hai giá trị có khác nhau hay không (không kiểm tra kiểu dữ liệu). \u0026quot;!==\u0026quot; : Kiểm tra xem hai giá trị có khác nhau hoặc khác kiểu dữ liệu hay không. \u0026quot;\u0026gt;\u0026quot; : Kiểm tra xem giá trị bên trái có lớn hơn giá trị bên phải hay không. \u0026quot;\u0026lt;\u0026quot; : Kiểm tra xem giá trị bên trái có nhỏ hơn giá trị bên phải hay không. \u0026quot;\u0026gt;=\u0026quot; : Kiểm tra xem giá trị bên trái có lớn hơn hoặc bằng giá trị bên phải hay không. \u0026quot;\u0026lt;=\u0026quot; : Kiểm tra xem giá trị bên trái có nhỏ hơn hoặc bằng giá trị bên phải hay không. Toán tử logic (Logical):\n\u0026quot;\u0026amp;\u0026amp;\u0026quot; : Phép AND logic, trả về true nếu cả hai giá trị đều đúng. \u0026quot;||\u0026quot; : Phép OR logic, trả về true nếu ít nhất một trong hai giá trị là đúng. \u0026quot;!\u0026quot; : Phép NOT logic, đảo ngược giá trị logic. Toán tử nổi chuỗi:\n\u0026ldquo;+\u0026rdquo; : Nối chuỗi, kết hợp hai chuỗi lại với nhau. Ví dụ: var firstName = \u0026#39;First Cloud\u0026#39;;\rvar lastName = \u0026#39;Journey\u0026#39;;\rvar fullName = firstName + \u0026#39; \u0026#39; + lastName; console.log(fullName); // First Cloud Journey Và còn nhiều toán tử khác như toán tử ba ngôi (ternary), toán tử tăng/giảm (++/\u0026ndash;), toán tử bit, và toán tử khác. Mỗi toán tử có cú pháp và quy tắc hoạt động riêng, nên cần hiểu kỹ để sử dụng đúng và hiệu quả.\nKiểu dữ liệu Sử dụng để lưu trữ và làm việc với các giá trị. Dưới đây là một số kiểu dữ liệu phổ biến trong JavaScript:\nKiểu dữ liệu Nguyên thủy (Primitive Data Types): Number: Kiểu dữ liệu số, bao gồm cả số nguyên và số thực. var a = 1;\rvar b = 2; String: Kiểu dữ liệu chuỗi, được sử dụng để lưu trữ và làm việc với các dãy ký tự. var fullName = \u0026#34;First Cloud Journey\u0026#34; Boolean: Kiểu dữ liệu logic, chỉ có hai giá trị là true (đúng) và false (sai). var isSuccess = true; null: Biểu thị giá trị không tồn tại hoặc không hợp lệ. var isNull = null; // không có gì undefined: Biểu thị một biến chưa được gán giá trị. var age; Symbol: Kiểu dữ liệu duy nhất và không thay đổi, được sử dụng để tạo ra các giá trị duy nhất. var id = Symbol(\u0026#39;id\u0026#39;) // tính duy nhất Kiểu dữ liệu Đối tượng (Object Data Type): Object: Kiểu dữ liệu đối tượng, được sử dụng để lưu trữ và làm việc với các thuộc tính và phương thức. var myObject = {\rname: \u0026#39;First Cloud Journey\u0026#39;,\rage: 10,\raddress: \u0026#39;Ho CHi Minh\u0026#39;\r} Kiểu dữ liệu Đặc biệt: Array: Một loại đặc biệt của đối tượng, được sử dụng để lưu trữ và làm việc với một tập hợp các giá trị có thứ tự. var myArray = [\r\u0026#39;SAA\u0026#39;,\r\u0026#39;DVA\u0026#39;,\r\u0026#39;SAP\u0026#39;\r]; Function: Một loại đặc biệt của đối tượng, được sử dụng để định nghĩa và thực thi các khối mã. var myFunction = function (){\ralert(\u0026#39;Welcome to the First Cloud Journey\u0026#39;);\r} Kiểm tra kiểu dữ liệu\nSử dụng typeof để kiểm tra kiểu dữ liệu Ví dụ: var a = \u0026#39;1\u0026#39;;\rvar b = 2;\rvar c = typeof a;\rvar d = typeof b;\rvar e = typeof d;\rconsole.log(c, d, e) // Output: c: string, d: number, e: string Chú ý: Kết quả trả về của typeof sẽ luôn là 1 chuỗi, vậy nên typeof của d sẽ là \u0026lsquo;string\u0026rsquo;. Nhưng đáng lưu ý rằng JavaScript là một ngôn ngữ có kiểu dữ liệu động (dynamically typed), điều này có nghĩa là bạn không cần phải khai báo kiểu dữ liệu cho biến khi tạo ra chúng. Kiểu dữ liệu được xác định tự động dựa trên giá trị mà biến đang giữ. Điều này cho phép bạn gán các kiểu dữ liệu khác nhau cho cùng một biến trong quá trình thực thi.\n"
},
{
	"uri": "/4-function/",
	"title": "Làm việc với Hàm",
	"tags": [],
	"description": "",
	"content": "Hàm là một khối mã được đặt tên và có thể được gọi để thực hiện một tác vụ cụ thể. Hàm giúp tổ chức mã thành các đơn vị nhỏ hơn, tái sử dụng mã và tạo ra các chức năng độc lập. Dưới đây là cách khai báo và sử dụng hàm trong JavaScript:\nKhai báo hàm:\nHàm có thể được khai báo bằng cách sử dụng từ khóa function, theo sau là tên của hàm và danh sách các tham số trong dấu ngoặc đơn (). Thân hàm, chứa các câu lệnh để thực thi, được đặt trong cặp ngoặc nhọn {}.\nfunction myFunction(thamso1, thamso2) {\r// Khối mã của hàm\rreturn giaTriTrave;\r} Tham số:\nĐịnh nghĩa: Tham số là giá trị được truyền vào function khi nó được gọi. Nó cho phép function nhận dữ liệu từ bên ngoài và sử dụng dữ liệu đó để thực hiện các thao tác. Kiểu dữ liệu: không giới hạn kiểu dữ liệu Truyền tham số: 1 tham số\nNhiều tham số\nVí dụ:\nfunction message(mess1, mess2) {\rconsole.log(mess1);\rconsole.log(mess2)\r}\rmessage(\u0026#39;Hi\u0026#39;, \u0026#39;Hello\u0026#39;); Gọi hàm:\nHàm có thể được gọi bằng cách sử dụng tên hàm, theo sau là danh sách các đối số trong dấu ngoặc đơn (). ```\rfunction message(mess1, mess2) {\rconsole.log(mess1);\rconsole.log(mess2)\r}\rmessage(\u0026#39;Hi\u0026#39;, \u0026#39;Hello\u0026#39;); // gọi hàm message với 2 tham số Hi và Hello\r``` Giá trị trả về:\nHàm có thể trả về một giá trị bằng cách sử dụng từ khóa return. Khi gặp phần tử return, hàm sẽ kết thúc và trả về giá trị đã được xác định. function tinhTong(a, b) {\rreturn a + b;\r}\rvar tong = tinhTong(2, 3); // tong = 5 // Gọi hàm và lưu giá trị trả về vào biến result\rconsole.log(result); // In ra 8 Hàm nặc danh (Anonymous function):\nHàm có thể được khai báo mà không cần tên, gọi là hàm nặc danh. Hàm nặc danh thường được sử dụng như một đối số của các hàm khác hoặc để tạo ra các khối mã độc lập.\nvar myFunction = function() {\r// Thân hàm nặc danh\r// Các câu lệnh được thực thi ở đây\r}; Hàm mũi tên (Arrow function):\nArrow function là một cú pháp ngắn gọn để khai báo hàm trong JavaScript. Nó có thể giúp viết mã ngắn gọn hơn và giữ nguyên ngữ cảnh this của hàm gốc.\nvar addNumbers = (a, b) =\u0026gt; a + b;\rvar result = addNumbers(5, 3);\rconsole.log(result); // In ra 8 Hàm trong JavaScript rất mạnh mẽ và linh hoạt, cho phép bạn thực hiện các tác vụ phức tạp và tái sử dụng mã một cách dễ dàng.\nThực hành tạo hàm sum\nHãy tạo 1 hàm có tên là sum có 2 tham số: Tham số thứ 1 là a Tham số thứ 2 là b Kết quả\rfunction sum(a,b){\r} "
},
{
	"uri": "/5-string/",
	"title": "Làm việc với Chuỗi",
	"tags": [],
	"description": "",
	"content": "Trong JavaScript, một \u0026ldquo;string\u0026rdquo; là một chuỗi các ký tự được đặt trong dấu nháy đơn (\u0026rsquo;\u0026rsquo;) hoặc dấu nháy kép (\u0026quot;\u0026quot;). Dưới đây là một số ví dụ về cách khai báo và sử dụng string trong JavaScript:\nKiểu dữ liệu\nChuỗi là một kiểu dữ liệu nguyên thủy trong JavaScript. Nó được biểu diễn bằng đối tượng String. Tạo chuỗi\nCó nhiều cách để tạo chuỗi trong JavaScript: Sử dụng dấu nháy đơn hoặc dấu nháy kép:\nvar str1 = \u0026#34;First Cloud Journey\u0026#34;;\rvar str2 = \u0026#39;First Cloud Journey\u0026#39;; Sử dụng hàm String:\nvar str3 = new String(\u0026#34;First Cloud Journey\u0026#34;); Sử dụng toán tử nối (+):\nvar str4 = \u0026#34;First\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Cloud\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Journey\u0026#34;; Thao tác với chuỗi\nJavaScript cung cấp nhiều phương thức để thao tác với chuỗi, bao gồm: Lấy độ dài chuỗi: var str = \u0026#34;First Cloud Journey\u0026#34;;\rvar length = str.length; // length = 18 Tìm kiếm ký tự: var str = \u0026#34;First Cloud Journey\u0026#34;;\rvar index = str.indexOf(\u0026#34;i\u0026#34;); // index = 1 Cắt chuỗi: var str = \u0026#34;First Cloud Journey\u0026#34;;\rvar sliceStr = str.slice(0, 5); // slice = \u0026#34;First\u0026#34; Cắt 1 chuỗi thành 1 array var str = \u0026#39;First, Cloud , Journey\u0026#39;;\rvar splitStr = str.split(\u0026#39;, \u0026#39;); // tìm để điểm chung của chuỗi để cắt Chuyển đổi chuỗi: var str = \u0026#34;First Cloud Journey\u0026#34;;\rvar uppercase = str.toUpperCase(); // uppercase = \u0026#34;FIRST CLOUD JOURNEY\u0026#34; Thay thế chuỗi Thay thế một chuỗi con cụ thể var str = \u0026#34;Hello, world!Welcome to the First Cloud Journey.\u0026#34;;\rvar replaceStr = str.replace(\u0026#34;world\u0026#34;,\u0026#34;everyone\u0026#34;); console.log(replacedString1); // Output: Hello, everyone*! Welcome to First Cloud Journey. Thay thế tất cả các kết quả khớp với một chuỗi con var str = \u0026#34;Hello, world!Welcome to the First Cloud Journey.\u0026#34;;\rvar replaceStr1 = str.replace(/world/g,\u0026#34;everyone\u0026#34;); console.log(replacedString1); // Output: Hello, everyone! Welcome to the First Cloud Journey. Thay thế bằng sử dụng biểu thức chính quy var str = \u0026#34;Hello, world!Welcome to the First Cloud Journey.\u0026#34;;\rvar replaceStr2 = str.replace(/o/gi,\u0026#34;*\u0026#34;); console.log(replacedString2); // Output: Hell*, every*e! Welc*me t* the First Cl*ud J*urney. Loại bỏ khoảng trắng thừa var str = \u0026#34;Hello, world!Welcome to the First Cloud Journey.\u0026#34;;\rvar trimStr= str.trim(); Template String var firstName = \u0026#39;First Cloud\u0026#39;;\rvar lastName = \u0026#39;Journey\u0026#39;\rconsole.log(`Welcome to ${firstName} ${lastName}`); "
},
{
	"uri": "/6-number/",
	"title": "Làm việc với Số",
	"tags": [],
	"description": "",
	"content": " Khái niệm Kiểu dữ liệu số trong JavaScript được sử dụng để biểu diễn các giá trị số. Bao gồm hai loại chính: Số nguyên: Ví dụ: 1, 2, 3, 4, 5 Số thực: Ví dụ: 1.2, 3.14, 100.5 Biểu diễn Số trong JavaScript được biểu diễn dưới dạng số thực dấu phẩy động theo chuẩn IEEE-754 với độ chính xác kép. Thao tác JavaScript cung cấp nhiều toán tử và hàm để thao tác với số, bao gồm:\nToán tử số học: +, -, *, /, %, ++, \u0026ndash; Hàm toán học: Math.sqrt(), toString, toFixed , Math.round() var a = 10;\rvar b = 20;\r// Cộng hai số\rvar a = a + b; // a = 30\r// Trừ hai số\rvar b = b - a; // b = 10\r// Nhân hai số\rvar c = a * b; // c = 200\r// Chia hai số\rvar d = b / a; // d = 2\r// Lấy căn bậc hai\rvar e = Math.sqrt(a); // e = 3.162277660168379\r// Làm tròn xuống\rvar Pi = 3.14\rvar g = Pi.toFixed(); //g = 3\r// Làm tròn lên\rvar Pi = 3.5\rvar h = Pi.toFixed(); //h = 4\r// Làm tròn số thập phân\rvar Pi = 3.1412434\rvar f = Pi.toFixed(2) // f = 3.14\r// Convert từ số sang chuỗi\rvar myString = a.toString(); // myString = \u0026#39;20\u0026#39;\rconsole.log(a, b, c, d, e, f, g, h); "
},
{
	"uri": "/7-array/",
	"title": "Làm việc với Mảng",
	"tags": [],
	"description": "",
	"content": "Mảng (Array) trong JavaScript Khái niệm:\nMảng trong JavaScript là một kiểu dữ liệu được sử dụng để lưu trữ tập hợp các giá trị có thứ tự. Nó có thể chứa bất kỳ kiểu dữ liệu nào, bao gồm số, chuỗi, đối tượng, v.v. Khai báo và khởi tạo:\nCó hai cách phổ biến để khai báo và khởi tạo mảng trong JavaScript: Sử dụng dấu ngoặc vuông: var arr = []; // Khai báo mảng rỗng\rvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;]; // Khai báo mảng với các giá trị ban đầu Sử dụng hàm Array var arr = new Array(); // Khai báo mảng rỗng\rvar arr = new Array(1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;); // Khai báo mảng với các giá trị ban đầu Truy cập phần tử:\nBạn có thể truy cập phần tử trong mảng bằng cách sử dụng chỉ mục. Chỉ mục bắt đầu từ 0, và tương ứng với vị trí của phần tử trong mảng.\nvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;];\r// Truy cập phần tử đầu tiên\rvar firstElement = arr[0]; // firstElement = 1\r// Truy cập phần tử cuối cùng\rvar lastElement = arr[arr.length - 1]; // lastElement = \u0026#34;b\u0026#34; Thay đổi phần tử:\nBạn có thể thay đổi giá trị của phần tử trong mảng bằng cách gán giá trị mới cho nó.\nvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;];\r// Thay đổi giá trị của phần tử đầu tiên\rarr[0] = 10;\r// Thay đổi giá trị của phần tử cuối cùng\rarr[arr.length - 1] = \u0026#34;c\u0026#34;; Thêm phần tử:\nCó nhiều phương thức để thêm phần tử vào mảng: Sử dụng phương thức push:\nvar arr = [1, 2, 3];\r// Thêm phần tử vào cuối mảng\rarr.push(4); // arr = [1, 2, 3, 4] Sử dụng phương thức unshift:\nvar arr = [1, 2, 3];\r// Thêm phần tử vào đầu mảng\rarr.unshift(0); // arr = [0, 1, 2, 3] Xóa phần tử:\nCó nhiều phương thức để xóa phần tử khỏi mảng: Sử dụng phương thức pop: var arr = [1, 2, 3];\r// Xóa phần tử cuối cùng khỏi mảng\rarr.pop(); // arr = [1, 2] Sử dụng phương thức shift: var arr = [1, 2, 3];\r// Xóa phần tử đầu tiên khỏi mảng\rarr.shift(); // arr = [2, 3] Sử dụng phương thức splice để xóa phần tử bất kì trong array var arr = [1, 2, 3];\r// Xóa phần tử thứ hai khỏi mảng\rarr.splice(1,1); // arr = [1, 3] Tìm kiếm phần tử:\nBạn có thể sử dụng các phương thức sau để tìm kiếm phần tử trong mảng: Phương thức indexOf:\nvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;];\r// Tìm vị trí xuất hiện đầu tiên của \u0026#34;a\u0026#34;\rvar index = arr.indexOf(\u0026#34;a\u0026#34;); // index = 3 Phương thức lastIndexOf:\nvar arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;a\u0026#34;]; // Tìm vị trí xuất hiện cuối cùng của \u0026#34;a\u0026#34;\rvar index = arr.lastIndexOf(\u0026#34;a\u0026#34;); // index = 5 Sắp xếp phần tử:\nSử dụng phương thức sort để sắp xếp phần tử trong mảng: var arr = [3, 2, 1, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;];\r// Sắp xếp phần tử theo thứ tự tăng dần\rarr.sort(); // arr = [1, 2, 3, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;] Chuyển kiểu dữ liệu từ Object của Array sang String\nSử dụng phương thức toString var courses = [ \u0026#39;Java\u0026#39;, \u0026#39;PHP\u0026#39;, \u0026#39;HTML\u0026#39;];\rconsole.log(courses.toString()); Nối 2 mảng lại với nhau\nSử dụng phương thức concat var arr1=[\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;];\rvar arr2=[\u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;];\r// Nối 2 mảng arr1 và arr2\rvar arr3 = arr1.concat(arr2); // arr3= [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;] Cắt phần tử của mảng\nSử dụng phương thức slice var arr = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;];\r// Cắt phần tử đầu tiên và phần tử cuối cùng\rvar arr1 = arr.slice(1, 2); // arr1 = [\u0026#39;b\u0026#39;] Thực hành Cho trước hàm joinWithCharacter có 2 tham số là array và charactor, hãy hoàn thành phần nội dung hàm sao cho hàm trả về 1 chuỗi là kết quả của việc nối từng phần tử của mảng với charactor.\n// Viết hàm tại đây\r// Ví dụ khi sử dụng\rvar cars = [\u0026#39;BMW\u0026#39;, \u0026#39;Vinfast\u0026#39;, \u0026#39;Mercedes\u0026#39;];\rvar result = joinWithCharacter(cars, \u0026#39; - \u0026#39;);\rconsole.log(result); // Expected: \u0026#34;BMW - Vinfast - Mercedes\u0026#34; Kết quả\rfunction joinWithCharacter(array, charactor) {\rreturn(array.join(charactor));\r}\r// Ví dụ khi sử dụng\rvar cars = ['BMW', 'Vinfast', 'Mercedes'];\rvar result = joinWithCharacter(cars, ' - ');\rconsole.log(result); // Expected: \u0026quot;BMW - Vinfast - Mercedes\u0026quot;\rhãy tạo hàm getLastElement có 1 tham số (đối số là 1 array), hàm này sẽ trả về phần tử cuối cùng trong mảng.\n// Viết hàm tại đây\r// Ví dụ sử dụng\rvar animals = [\u0026#39;Monkey\u0026#39;, \u0026#39;Tiger\u0026#39;, \u0026#39;Elephant\u0026#39;];\rvar result = getLastElement(animals);\rconsole.log(result); // Expected: \u0026#34;Elephant\u0026#34;\rconsole.log(animals); // Expected: [\u0026#39;Monkey\u0026#39;, \u0026#39;Tiger\u0026#39;, \u0026#39;Elephant\u0026#39;] Kết quả\rfunction getLastElement(arr){\rreturn(arr.slice(-1));\r}\r// Ví dụ sử dụng\rvar animals = ['Monkey', 'Tiger', 'Elephant'];\rvar result = getLastElement(animals);\rconsole.log(result); // Expected: \u0026quot;Elephant\u0026quot;\rconsole.log(animals); // Expected: ['Monkey', 'Tiger', 'Elephant']\r"
},
{
	"uri": "/8-object/",
	"title": "Làm việc với Object",
	"tags": [],
	"description": "",
	"content": "Object trong JavaScript Khái niệm: Object trong JavaScript là một kiểu dữ liệu được sử dụng để lưu trữ tập hợp các dữ liệu có liên quan với nhau. Nó bao gồm các thuộc tính (property) và phương thức (method). Khai báo và khởi tạo: Có nhiều cách để khai báo và khởi tạo object trong JavaScript: Sử dụng dấu ngoặc vuông: var obj = {}; // Khai báo object rỗng\rvar obj = {name: \u0026#34;Nguyễn Văn A\u0026#34;, age: 30}; // Khai báo object với các thuộc tính ban đầu Sử dụng hàm Object: var obj = new Object(); // Khai báo object rỗng\rvar obj = new Object({name: \u0026#34;Nguyễn Văn A\u0026#34;, age: 30}); // Khai báo object với các thuộc tính ban đầu Sử dụng literal object: var obj = {\rname: \u0026#34;Nguyễn Văn A\u0026#34;,\rage: 30,\rsayHello: function() {\rconsole.log(\u0026#34;Hello!\u0026#34;); }\r}; Truy cập thuộc tính:\nBạn có thể truy cập thuộc tính của object bằng cách sử dụng tên của nó. var obj = {name: \u0026#34;Nguyễn Văn A\u0026#34;, age: 30};\r// Truy cập thuộc tính \u0026#34;name\u0026#34;\rvar name = obj.name; // name = \u0026#34;Nguyễn Văn A\u0026#34; // Truy cập thuộc tính \u0026#34;age\u0026#34;\rvar age = obj.age; // age = 30 Thêm thuộc tính:\nBạn có thể thêm thuộc tính mới vào object bằng cách sử dụng toán tử . hoặc []. var obj = {name: \u0026#34;Nguyễn Văn A\u0026#34;};\r// Thêm thuộc tính \u0026#34;age\u0026#34;\robj.age = 30;\r// Thêm thuộc tính \u0026#34;address\u0026#34;\robj[\u0026#34;address\u0026#34;] = \u0026#34;123 Main Street\u0026#34;; Xóa thuộc tính:\nBạn có thể sử dụng toán tử delete để xóa thuộc tính khỏi object. var obj = {name: \u0026#34;Nguyễn Văn A\u0026#34;, age: 30};\r// Xóa thuộc tính \u0026#34;age\u0026#34;\rdelete obj.age; Phương thức:\nPhương thức là hàm được gắn vào object. Bạn có thể gọi phương thức bằng cách sử dụng tên của nó. var obj = {\rname: \u0026#34;Nguyễn Văn A\u0026#34;,\rsayHello: function() {\rconsole.log(\u0026#34;Hello!\u0026#34;);\r}\r};\r// Gọi phương thức \u0026#34;sayHello\u0026#34;\robj.sayHello(); // output: Hello! Date Object\nKhái niệm\nDate object là một kiểu dữ liệu được sử dụng để biểu diễn ngày, giờ, phút, giây, mili giây và múi giờ trong JavaScript. Nó lưu trữ thông tin ngày tháng theo giờ chuẩn quốc tế (UTC - Coordinated Universal Time). Bạn có thể sử dụng các phương thức của Date object để truy cập, thay đổi, và thao tác với các thành phần ngày giờ. Tạo Date object\nSử dụng hàm khởi tạo new Date(): var now = new Date(); // Tạo Date object với thời gian hiện tại Truyền chuỗi ngày tháng: var dateString = \u0026#34;2023-11-19\u0026#34;;\rvar date = new Date(dateString); // Tạo Date object từ chuỗi ngày tháng Truyền các thành phần ngày tháng riêng biệt: var year = 2024;\rvar month = 2; // Tháng bắt đầu từ 0 (tháng 2 là 1)\rvar day = 5;\rvar hour = 10;\rvar minute = 30;\rvar second = 0;\rvar millisecond = 0;\rvar date = new Date(year, month, day, hour, minute, second, millisecond); Các thành phần ngày, giờ:\nThuộc tính Miêu tả year Năm month Tháng (0-11) date Ngày (1-31) hours Giờ (0-23) minutes Phút (0-59) seconds Giây(0-59) milliseconds Mili giây(0-999) getDay() Trả về thứ trong tuần (0: chủ nhật; 6: thứ 7) Ví dụ: var now = new Date();\rvar year = now.getFullYear();\rvar month = now.getMonth() + 1; // Tháng bắt đầu từ 1\rvar day = now.getDate();\rvar hour = now.getHours();\rvar minute = now.getMinutes();\rvar second = now.getSeconds();\rconsole.log(\u0026#34;Ngày: \u0026#34; + day + \u0026#34;/\u0026#34; + month + \u0026#34;/\u0026#34; + year);\rconsole.log(\u0026#34;Giờ: \u0026#34; + hour + \u0026#34;:\u0026#34; + minute + \u0026#34;:\u0026#34; + second); Thay đổi các thành phần ngày giờ\nPhương thức Miêu tả setFullYear(year) Thiết lập năm setMonth(month) Thiết lập tháng (0-11) setDate(day) Thiết lập ngày trong tháng (1-31) setHours(hour) Thiết lập giờ (0-23) setMinutes(minute) Thiết lập phút (0-59) setSeconds(second) Thiết lập giây (0-59) setMilliseconds(millisecond) Thiết lập mili giây (0-999) Ví dụ: var date = new Date(2023, 10, 20); // Tháng 11 (index 10)\rdate.setMonth(7); // Tháng 8 (index 7)\rdate.setDate(31);\rconsole.log(date); // \u0026#34;2023-08-31T00:00:00.000Z\u0026#34; Math object\nMath Object là một đối tượng cung cấp các hàm toán học và hằng số thường dùng\nCác hàm thường dùng:\nTên hàm Miêu tả Ví dụ Math.abs(x) Tìm giá trị tuyệt đối của x Math.abs(-5) trả về 5 Math.ceil(x) Làm tròn x lên thành số nguyên lớn nhất không nhỏ hơn x Math.ceil(2.3) trả về 3 Math.floor(x) Làm tròn x xuống thành số nguyên nhỏ nhất không lớn hơn x Math.floor(2.3) trả về 2 Math.round(x) Làm tròn x đến số nguyên gần nhất Math.round(2.3) trả về 2, Math.round(2.7) trả về 3 Math.max(x1, x2, \u0026hellip;) Tìm giá trị lớn nhất trong các số Math.max(10, 5, 15) trả về 15 Math.min(x1, x2, \u0026hellip;) Tìm giá trị nhỏ nhất trong các số Math.min(10, 5, 15) trả về 5 Math.pow(x, y) Tính x lũy thừa y Math.pow(2, 3) trả về 8 Math.random() Tạo số ngẫu nhiên từ 0 đến 1 (không bao gồm 1) Math.random() trả về giá trị bất kỳ trong khoảng (0, 1) Math.sqrt(x) Tính căn bậc hai của x Math.sqrt(16) trả về 4 Ví dụ: tạo hàm getRandomNumber, hàm này nhận 1 tham số là mảng và sẽ trả về ngẫu nhiên 1 phần tử của mảng.\nfunction getRandomNumber(array){\rvar index = Math.floor(Math.random() * array.length);\rreturn array[index];\r} "
},
{
	"uri": "/9-cstatement-ternaryoperator/",
	"title": "Câu lệnh điều kiện - Toán tử ba ngôi",
	"tags": [],
	"description": "",
	"content": "Lệnh rẽ nhánh If else Khái niệm Câu lệnh diều kiện if..else là 1 trong những cấu trúc điều kiện cơ bản. Nó cho phép bạn thực thi 1 khối mã nhật dịnh chỉ khi một điều kiện nào đó được thỏa mãn. Cú pháp: if(điều kiện){\r// code sẽ được thực thi nếu thỏa điều kiện\r} else {\r// code sẽ được thực thi nếu thỏa điều kiện\r} Ví dụ: var a = 1;\rvar b = 2;\rif ( a \u0026lt; b){\rconsole.log(\u0026#34;So sánh đúng!\u0026#34;);\r} else {\rconsole.log(\u0026#34;So sánh sai!\u0026#34;);\r} Câu lệnh rẽ nhánh - Switch Khái niệm Câu lệnh điều kiện switch\u0026hellip;case là một lựa chọn khác để thực hiện logic rẽ nhánh trong JavaScript. Nó hữu ích khi bạn muốn kiểm tra một biến với nhiều giá trị khác nhau và thực thi các khối lệnh tương ứng. Cú pháp: switch (expression) {\rcase value1:\r// Khối lệnh được thực thi nếu expression có giá trị bằng value1\rbreak;\rcase value2:\r// Khối lệnh được thực thi nếu expression có giá trị bằng value2\rbreak;\r// ... Thêm các case khác nếu cần\rdefault:\r// Khối lệnh mặc định được thực thi nếu expression không khớp với bất kỳ case nào (tùy chọn)\r} Ví dụ: var day = 3;\rswitch (day) {\rcase 1:\rconsole.log(\u0026#34;Thứ Hai\u0026#34;);\rbreak;\rcase 2:\rconsole.log(\u0026#34;Thứ Ba\u0026#34;);\rbreak;\rcase 3:\rconsole.log(\u0026#34;Thứ Tư\u0026#34;);\rbreak;\rdefault:\rconsole.log(\u0026#34;Không phải ngày trong tuần (1-3)\u0026#34;);\r} Toán tử 3 ngôi (Ternary operator) Khái niệm: Toán tử 3 ngôi, hay còn gọi là toán tử điều kiện, là một toán tử trong JavaScript cho phép bạn rút gọn cú pháp của một phép gán hoặc một câu lệnh điều kiện if/else.\nCú pháp:\nđiều kiện ? giâ trị 1 : giá trị 2 Ví dụ:\nvar num = 10;\rvar result = num \u0026gt; 0 ? \u0026#34;Số dương\u0026#34; : \u0026#34;Số không dương\u0026#34;;\rconsole.log(result); // \u0026#34;Số dương\u0026#34; Thực hành:\nTạo hàm getCanVoteMessage, hàm này có 1 tham số là age. Trong trường hợp từ 18 tuổi trở lên hàm sẽ trả về Bạn có thể bỏ phiếu, ngược lại hàm trả về Bạn chưa được bỏ phiếu. Kết quả\r// Làm bài\rfunction getCanVoteMessage(age){\rvar canVote = age \u0026gt;= 18 ? \u0026quot;Bạn có thể bỏ phiếu\u0026quot; : \u0026quot;Bạn chưa được bỏ phiếu\u0026quot;;\rreturn canVote;\r}\r// Kỳ vọng\rconsole.log(getCanVoteMessage(18)) // 'Bạn có thể bỏ phiếu'\rconsole.log(getCanVoteMessage(15)) // 'Bạn chưa được bỏ phiếu'\r"
},
{
	"uri": "/10-loop/",
	"title": "Vòng lặp",
	"tags": [],
	"description": "",
	"content": "Vòng lặp For Khái niệm\nVòng lặp for là vòng lặp dùng để thực thi một hành động lặp đi lặp lại.\nCú pháp 1:\nfor ( var i = 0; i \u0026lt; 10; i++){\rconsole.log(i);\r} var i = 0: Khởi tạo biến cho vòng lặp i \u0026lt; 10: điểu kiện để vòng lặp thực hiện i++: tằng giá trị chạy lên 1 mỗi khi thực hiện xong hành động Cú pháp 2: Bạn có thể bỏ trống giá trị ban đầu trong cú pháp của vòng lặp for nếu trước đó đã gán giá trị của biến chạy\nvar i = 0;\rfor (; i \u0026lt; 10; i++){\rconsole.log(i);\r} Cú pháp 3: Bạn cũng có thể bỏ trống giá trị thứ hai trong cú pháp của vòng lắp for. Lúc này, nếu giá trị thứ hai trả về giá trị true thì vòng lặp tiếp tục thực thi, nếu là false thì vòng lặp sẽ dừng lại.\nfor( var i = 0; ; i++){\rconsole.log(i);\rif(i == 5) break;\r//Nếu bỏ trống giá trị thứ hai thì bắt buộc trong vòng lặp phải có lệnh break, nếu không thì vòng lặp sẽ chạy mãi không dừng lại.\r} Tuy nhiên, việc bỏ trống các giá trị trong cú pháp của vòng lặp for là không nên. Dù ngắn gọn nhưng nếu dùng không đúng lúc sẽ khiến code của chúng ta khó đọc lại.\nThực hành\nHãy tạo hàm getRandNumbers có 3 tham số là min, max, length. Hàm này sẽ trả về một mảng gồm length phần tử, các giá trị trong mảng là số ngẫu nhiên, giá trị trong khoảng từ min tới max. Gợi ý: Math.random() * (max - min) + min là cách tạo ra 1 số ngẫu nhiên trong khoảng min - max.\nKết quả\rfunction getRandNumbers (min, max, length){\rvar arr=[];\rfor(var i=0; i \u0026lt; length; i++){\rarr.push((Math.random() * (max - min) + min));\r}\rreturn arr;\r}\r// Hãy lưu ý: Vòng lặp phải luôn có điểm dừng nếu không sẽ dẫn đến treo trình duyệt\rCho trước mảng numbers, hãy viết hàm getTotal trả về tổng giá trị các phần tử của mảng.\nKết quả\rfunction getRandNumbers (min, max, length){\rvar arr=[];\rfor(var i=0; i \u0026lt; length; i++){\rarr.push((Math.random() * (max - min) + min));\r}\rreturn arr;\r}\r// Hãy lưu ý: Vòng lặp phải luôn có điểm dừng nếu không sẽ dẫn đến treo trình duyệt\rCho trước mảng orders là danh sách chứa các khóa học, các mặt hàng này được thể hiện dưới dạng object và đều có 1 key là price để thể hiện giá trị của mặt hàng đó. Bạn hãy hoàn thành hàm getTotal để tính được tổng giá trị của đơn hàng. Kết quả\rvar orders = [\r{\rname: 'Khóa học HTML - CSS Pro',\rprice: 3000000\r},\r{\rname: 'Khóa học Javascript Pro',\rprice: 2500000\r},\r{\rname: 'Khóa học React Pro',\rprice: 3200000\r}\r]\rvar orders = [\r{\rname: 'Khóa học HTML - CSS Pro',\rprice: 3000000\r},\r{\rname: 'Khóa học Javascript Pro',\rprice: 2500000\r},\r{\rname: 'Khóa học React Pro',\rprice: 3200000\r}\r]\rfunction getTotal(order){\rvar total=0;\rfor(var i=0; i\u0026lt;order.length;i++)\r{\rtotal=order[i].price+total;\r}\rreturn total;\r}\rconsole.log(getTotal(orders));\r// Expected results:\rgetTotal(orders) // Output: 8700000\rVòng lặp for\u0026hellip;in Khái niệm Vòng lặp này thường được sử dụng với mục đích là lặp trong một object chứ không phải trong array hay string giống như hai vòng lặp trên. Số lượng lặp tương ứng với số thuộc tính của object mà ta duyệt.\nCú pháp:\nfor (var key in obj){\r//đoạn code mà bạn muốn thực thi\r} var key: khai báo biến chạy obj: đố tượng duyệt Ví dụ:\n// Khai báo mảng\rvar myInfo = {\rname: FCJ,\raddress: HCM,\rage:10\r}\r// In ra các value trong array myInfo\rfor(var key in myInfo){\rconsole.log(myInfo(key)); }\r// Kết quả: FCJ HCM 10 Thực hành Hoàn thành đoạn code sau để được output như mong muốn // Expected results:\rconsole.log(run({ name: \u0026#39;First Cloud Journey\u0026#39;, addrees: \u0026#39;Ho Chi Minh\u0026#39; }));\r// Output:\r// [\r// \u0026#34;Thuộc tính name có giá trị First Cloud Journey\u0026#34;,\r// \u0026#34;Thuộc tính address có giá trị Ho Chi Minh\u0026#34;\r// ] Kết quả\rfunction run(info) {\rvar result = [];\rfor (var key in info) {\rresult.push(\u0026quot;Thuộc tính \u0026quot; + [key] + \u0026quot; có giá trị \u0026quot; + object[key]);\r}\rreturn result;\r}\rVòng lặp for\u0026hellip;of Khái niệm Vòng lặp for\u0026hellip;of cho phép bạn lặp qua các phần tử của một đối tượng iterable trong JavaScript.\nCú pháp:\nfor (var value of iterable){\r// đoạn code mà bạn muốn thực thi\r} Ví dụ\nvar myCerts = [\r\u0026#39;AWS Certified Solutions Architect - Professional\u0026#39;,\r\u0026#39;AWS Certified DevOps Engineer - Professional\u0026#39;,\r\u0026#39;AWS Certified SysOps Administrator - Associate\u0026#39;\r];\rfor (var value of myCerts){\rconsole.log(value)\r} Vòng lặp While Khái niệm Vòng lặp while dùng để lặp lại việc thực thi một đoạn code nếu điều kiện mà ta đưa ra vẫn còn đúng.\nCú pháp:\nwhile(điều kiện){\r// đoạn code mà bạn muốn thực thi\r} Ví dụ: Dùng vòng lặp while để hiển thị dãy số tăng dần từ 1 đến 9\nvar i = 1; // khai báo biến i\rwhile(i\u0026lt;10){\rconsole.log(`Kết quả: ${i}`) // in ra màn hình\ri++; // Câu lệnh này giúp cho điều kiện dần trở thành bị SAI\r} Vòng lặp do\u0026hellip;while Khái niệm Tương tự như vòng lặp while, vòng lặp do while dùng để lặp lại việc thực thi một đoạn mã nếu điều kiện mà ta đưa ra vẫn còn đúng. Tuy nhiên, đối với vòng lặp do while thì ở lần đầu tiên đoạn mã sẽ được thực thi luôn mà không cần phải kiểm tra điều kiện (đó chính là điểm khác nhau giữa vòng lặp while và do while) Cú pháp: do{\r// Đoạn code mà bạn muốn thực thi\r}while(điều kiện) Ví dụ: Dùng vòng lặp while để hiển thị dãy số giảm dần từ 9 xuống 1 var i = 0;\rdo{\ri++;\rconsole.log(`Kết quả: ${i}`);\r}while(i\u0026lt;9) Thực hành Viết một đoạn code mô tả số lần nhập mật khẩu ( không quá 3 lần nhập). Nếu nhập quá 3 lần sẽ in ra thông báo kiểm tra lại mật khẩu\nOutput:\nNhập lần mật khẩu: 1\rNhập lần mật khẩu: 2\rNhập lần mật khẩu: 3\rKiểm tra lại mật khẩu Kết quả\rvar i = 0;\rvar isSucess = false;\rdo {\ri++;\rif(i == 4) {\rconsole.log(\u0026quot;Kiểm tra lại mật khẩu\u0026quot;); break;\r};\rconsole.log(`Nhập mật khẩu lần: ${i}`);\r}while(!isSucess \u0026amp;\u0026amp; i \u0026lt; 3 )\rBreak và Continue trong vòng lặp Break Dùng để thoát khỏi vòng lặp ngay lập tức Khi gặp Break, vòng lặp sẽ dừng thực thi và chuyển sang phần code sau vòng lặp. Ví dụ: for (var i = 0; i \u0026lt; 10; i++) {\rconsole.log(i);\rif (i === 5) {\rbreak;\r}\r} Continue Dùng để bỏ qua phần còn lại của vòng lặp hiện tại và chuyển sang lần lặp tiếp theo. Khi gặp continue, vòng lặp sẽ tiếp tục thực thi từ đầu với lần lặp tiếp theo Ví dụ: for (var i = 0; i \u0026lt; 10; i++) {\rif (i % 2 === 0) {\rcontinue;\r}\rconsole.log(i);\r} Vòng lặp lồng nhau - Nested loop Khái niệm Vòng lặp lồng nhau là khi một vòng lặp được đặt bên trong một vòng lặp khác. Ví dụ, một vòng lặp for có thể được đặt bên trong một vòng lặp while.\nCú pháp:\nfor (var i = 0; i \u0026lt; 10; i++) {\rfor (var j = 0; j \u0026lt; 5; j++) {\r// Khối mã được thực thi lặp lại cho mỗi giá trị của i và j\r}\r} Vòng lặp ngoài (vòng lặp for) sẽ lặp lại 10 lần. Vòng lặp trong (vòng lặp for) sẽ lặp lại 5 lần cho mỗi lần lặp của vòng lặp ngoài. Ví dụ:\nvar arr = [\r[1, 2, 3],\r[4, 5, 6],\r[7, 8, 9]\r];\rfor (var i = 0; i \u0026lt; arr.length; i++) {\rfor (var j = 0; j \u0026lt; arr[i].length; j++) {\rconsole.log(arr[i][j]);\r}\r} "
},
{
	"uri": "/11-array2/",
	"title": "Làm việc với Mảng 2",
	"tags": [],
	"description": "",
	"content": "forEach() Khái niệm Dùng để duyệt qua từng phần tử của mảng. Nó cho phép bạn thực thi một hàm cho mỗi phần tử trong mảng. Cú pháp: array.forEach(function(elment, index, array){\r// Đoạn code mà bạn muốn thực thi\r}) array: Mảng mà bạn muốn duyệt qua function: Hàm thực thi element: Biến đại diện cho từng phần tử của mảng index: Ví trị hiện tại của phần tử trong mảng array: Tham chiếu đến mảng ban đầu Ví dụ: var arr = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;];\rarr.forEach(function(element) {\rconsole.log(element);\r}); Thực hành Tính tổng các phần tử của mảng\nKết quả\rvar arr = [1, 2, 3, 4, 5];\rvar sum = 0;\rarr.forEach(function(element) {\rsum += element;\r});\rconsole.log(sum); //sum = 15\revery() Khái niệm Kiếm tra tất cả các phần tử trong mảng thỏa mãn điều kiện gì đó. Nếu 1 phần tử không thỏa mãn điều kiện, vòng lặp sẽ dừng lại. Cú pháp: arr.every(function(element, index, array){\r// kiểm tra điều kiện\rreturn condition;\r}); arr: Mảng mà bạn muốn kiểm tra function: Hàm thực thi element: Biến đại diện cho từng phần tử của mảng index: Ví trị hiện tại của phần tử trong mảng arr: Tham chiếu đến mảng ban đầu return: Giá trị true hoặc false được trả về, biểu thị phần tử đó có thỏa mãn điểu kiện hay không. Ví dụ: // Kiểm tra xem tất cả các phần tử đều là số chẵn\rvar arr = [2, 4, 6, 8];\rvar allEven = arr.every(function(element) {\rreturn element % 2 === 0;\r});\rconsole.log(allEven); // true\r// Kiểm tra xem tất cả các phần tử đều lớn hơn 5\rvar arr = [6, 8, 10, 12];\rvar allGreaterThanFive = arr.every(function(element) {\rreturn element \u0026gt; 5;\r});\rconsole.log(allGreaterThanFive); // true Thực hành. Kiểm tra xem tất các các khóa học có được miễn phí hay không. myCourse = [\r{\rid: 1,\rname: \u0026#39;SAA\u0026#39;,\rprice: 0\r},\r{\rd: 1,\rname: \u0026#39;SAP\u0026#39;,\rprice: 0\r},\r{\rd: 1,\rname: \u0026#39;DVA\u0026#39;,\rprice: 0\r}\r]; Kết quả\rmyCourse = [\r{\rid: 1,\rname: 'SAA',\rprice: 0\r},\r{\rd: 1,\rname: 'SAP',\rprice: 0\r},\r{\rd: 1,\rname: 'DVA',\rprice: 0\r}\r];\rvar iCheck = myCourse.every(function(course){\rreturn course.price === 0;\r});\rconsole.log(iCheck) // true: Tất cả các khóa học đều miễn phí, // false: Có khóa học tính phí\rsome() Khải niệm\nKiểm tra xem ít nhất một phần tử của một mảng đáp ứng một điều kiện nhất định. Nó trả về true ngay khi gặp một phần tử thỏa mãn điều kiện, và trả về false nếu không có phần tử nào thỏa mãn Cú pháp: arr.some(function(element, index, array){\r// Kiểm tra điều kiện\rreturn condition;\r}) Ví dụ: Kiểm tra xem ít nhất một phần tử là số lẻ var arr = [2, 4, 6, 8];\rvar hasOddNumber = arr.some(function(element) {\rreturn element % 2 !== 0;\r});\rconsole.log(hasOddNumber); // false Thực hành\nKiểm tra xem có phần tử nào bằng 0 trong mảng sau hay không: var arr = [-1, 2, 3, 0]; Kết quả\rvar arr = [-1, 2, 3, 0];\rvar isZero = arr.some(function(element) {\rreturn element === 0;\r});\rconsole.log(isZero); // true\rfind() Khái niệm Tìm phần tử đầu tiên trong mảng thỏa mãn điều kiện đưa ra. Sau đó trả về giá trị đó ngay lập tức nếu thỏa mãm điều kiện, hoặc trả về undefines nếu không tìm thấy phần tử nào thỏa mãn điều kiện và dừng lặp Cú pháp array.find(function(element, index, array) {\r// Hàm kiểm tra\rreturn condition;\r}); Ví dụ: Tìm số chẵn đầu tiên trong mảng const numbers = [1,2,4,0,9];\rconst firstEvenNumber = numbers.find(function(number){\rreturn number % 2 === 0\r})\rconsole.log(firstEvenNumber); // Xuất: 2; filter() Khái niệm\nTìm tất cả các phần tử trong mảng thỏa mãn điều kiện đưa ra. Sau đó trả về giá trị phần tử đó nếu thỏa mãn điểu kiện hoặc trả mảng rỗng nếu không tìm thấy phần tử nào thỏa mãn điều kiện. Cú pháp: array.filer(function(element, index, array) {\r// Hàm kiểm tra\rreturn condition;\r}); Ví dụ: Tìm các phần tử chia hết cho 3 var listNumber = [1,3,5,7,9,12];\rvar result = listNumber.filter(function(number){\rreturn number % 3 === 0;\r})\rconsole.log(result) // [3,9,12] Thực hành.\nTìm tất cả các khóa học về AWS SAA.\nmyCourse = [\r{\rid: 1,\rname: \u0026#39;SAA\u0026#39;,\rprice: 0\r},\r{\rid: 2,\rname: \u0026#39;SAP\u0026#39;,\rprice: 0\r},\r{\rid: 3,\rname: \u0026#39;DVA\u0026#39;,\rprice: 0\r},\r{\rid: 4,\rname: \u0026#39;SAA\u0026#39;,\rprice: 10\r},\r]; Kết quả\rmyCourse = [\r{\rid: 1,\rname: 'SAA',\rprice: 0\r},\r{\rid: 2,\rname: 'SAP',\rprice: 0\r},\r{\rid: 3,\rname: 'DVA',\rprice: 0\r},\r{\rid: 4,\rname: 'SAA',\rprice: 10\r},\r];\rvar iCheck = myCourse.filter(function(course){\rreturn course.name === 'SAA';\r})\rconsole.log (iCheck);\rmap() Khái niệm Là một phương thức được sử dụng để chuyển đổi các phần tử trong một mảng JavaScript thành một mảng mới. Nó lặp qua mảng ban đầu và áp dụng một hàm cho mỗi phần tử. Hàm này có thể được sử dụng để thay đổi giá trị, sắp xếp lại thứ tự, hoặc trích xuất dữ liệu từ các phần tử. Cú pháp array.map(function(element, index, array) {\r// Hàm biến đổi\rreturn transformedElement;\r}); Ví dụ: Nhân đôi mỗi phần tử trong mảng var numbers = [0, 1, 2, 3, 4, 5]\rfunction doubleNumber (numbers){\rreturn numbers *2;\r}\rvar resultNumbers= numbers.map(doubleNumber);\rconsole.log(resultNumbers); Thực hành Thêm từ phần tử với key: address, value: \u0026lsquo;Ho Chi Minh\u0026rsquo; vào trong tất cả các object trong mảng sau\nvar course = [\r{\rid: 1,\rcourse: \u0026#39;SAA\u0026#39;,\rprice:10\r},\r{\rid: 1,\rcourse: \u0026#39;DVA\u0026#39;,\rprice:5\r},\r{\rid: 1,\rcourse: \u0026#39;SAP\u0026#39;,\rprice:20\r}\r] Kết quả\rvar course = [{\rid: 1,\rcourse: 'SAA',\rprice:10\r},\r{\rid: 1,\rcourse: 'DVA',\rprice:5\r},\r{\rid: 1,\rcourse: 'SAP',\rprice:20\r}\r];\rfunction changeInfo(course){\rreturn {\rid:1,\rcourse: 'SAA', price:10, address:'HCM'\r}\r}\rvar changeInfo= course.map(changeInfo);\rconsole.log(changeInfo)\rreduce() Khái niệm Là một phương thức được sử dụng để thực thi một hàm lên các phần tử của mảng ( từ trái sang phải ) với một biến tích lũy để thu về một giá trị duy nhất. Là một phương thức quan trong hay sử dụng trong lập trình hàm. Cú pháp: array.reduce(function(accumulator, currentValue, index, array) {\r// Hàm tích lũy\rreturn accumulatedValue;\r}, initialValue); function: Ham callback được áp dụng cho từng phần tử. Hàm này có 4 tham số: accumlator: Biến lưu trữ giá trị tích lũy sau mỗi lần lặp currentValue: Phần tử hiện tại của mảng đang được xử lý index (optional): Chỉ số của phần tử trong mảng đang được xử lý array(optional): mảng hiện tại gọi hàm reduce() initiaValue: là giá trị cho tham số thứ nhất (accumulator) của hàm callback trong lần gọi hàm đầu tiên. Nếu giá trị này không được cung cấp thì giá trị phần tử đầu tiên của mảng sẽ được sử dụng. Ví dụ: TÍnh tổng các phần tử trong mảng var arr = [1,2,3,4,5,6]\rvar sumArr = arr.reduce(function(total,number){\rreturn total + number;\r},0)\rconsole.log(sumArr) Thực hành Giả sử rằng chúng ta có một mảng đại diện cho danh sách thông tin các khóa học. Chúng ta hãy dùng hàm reduce() để tính tổng chi phi các khóa học đó. var course = [\r{\rid: 1,\rcourse: \u0026#39;SAA\u0026#39;,\rprice:10\r},\r{\rid: 1,\rcourse: \u0026#39;DVA\u0026#39;,\rprice:5\r},\r{\rid: 1,\rcourse: \u0026#39;SAP\u0026#39;,\rprice:20\r}\r]\rvar sumPrice = course.reduce(function(total, cost){\rreturn total + cost.price; },0)\rconsole.log(sumPrice); "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]